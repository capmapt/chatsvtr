name: 📊 Daily Trading Picks Sync

on:
  schedule:
    # 每天UTC 18:00 (北京时间凌晨02:00)执行
    - cron: '0 18 * * *'
  # 允许手动触发
  workflow_dispatch:
    inputs:
      sync_type:
        description: '同步类型'
        required: true
        default: 'smart'
        type: choice
        options:
        - smart
        - complete
        - trading_only

env:
  # 飞书API配置
  FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
  FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}

permissions:
  contents: write
  actions: read
  pull-requests: write
  issues: write

jobs:
  sync-trading-data:
    name: 🔄 同步交易精选数据
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0
          persist-credentials: true

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm install --save dotenv

      - name: 🔐 Setup Environment
        run: |
          echo "FEISHU_APP_ID=${{ secrets.FEISHU_APP_ID }}" > .env
          echo "FEISHU_APP_SECRET=${{ secrets.FEISHU_APP_SECRET }}" >> .env

      - name: 📊 Sync Trading Picks Data
        run: |
          echo "🚀 开始同步交易精选数据..."
          
          # 根据输入选择同步类型
          SYNC_TYPE="${{ github.event.inputs.sync_type || 'smart' }}"
          
          case $SYNC_TYPE in
            "complete")
              echo "执行完整同步..."
              npm run sync:complete
              ;;
            "trading_only")
              echo "只同步交易精选数据..."
              node scripts/sync-trading-picks-only.js
              ;;
            *)
              echo "执行智能同步..."
              npm run sync || node scripts/sync-trading-picks-only.js
              ;;
          esac

      - name: 🔄 Convert Data for Web
        run: |
          echo "🔄 转换数据格式..."
          node scripts/convert-trading-picks-for-web.js
      - name: 📝 Check for Changes
        id: check_changes
        run: |
          echo "🔍 检查文件变更..."
          git add .
          
          echo "📋 Git状态："
          git status --porcelain
          
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "📋 没有数据更新"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📋 检测到数据更新"
            echo "📋 暂存的变更："
            git diff --staged --name-only
          fi

      - name: 💾 Commit and Push Changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "🔧 配置Git用户信息..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          echo "📝 准备提交..."
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          echo "💾 执行提交..."
          git commit -m "chore: 📊 每日交易精选数据同步 - $TIMESTAMP" \
                     -m "" \
                     -m "🤖 Generated with [Claude Code](https://claude.ai/code)" \
                     -m "" \
                     -m "Co-Authored-By: Claude <noreply@anthropic.com>"
          
          echo "🚀 推送到远程仓库..."
          git push origin main || {
            echo "⚠️ 推送失败，尝试使用替代方法..."
            git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
            git push origin main
          }
          
          echo "✅ 推送完成"

      - name: 📈 Generate Sync Report
        if: always()
        run: |
          echo "## 📊 每日同步报告" >> sync_report.md
          echo "**时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> sync_report.md
          echo "**同步类型**: ${{ github.event.inputs.sync_type || 'smart' }}" >> sync_report.md
          echo "**数据更新**: ${{ steps.check_changes.outputs.changes || 'unknown' }}" >> sync_report.md
          echo "**状态**: ${{ job.status }}" >> sync_report.md
          echo "" >> sync_report.md
          echo "### 数据统计" >> sync_report.md
          
          # 检查数据文件
          if [ -f "assets/data/trading-picks.json" ]; then
            COMPANY_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('assets/data/trading-picks.json')).meta.totalCompanies)")
            echo "- 公司数量: $COMPANY_COUNT" >> sync_report.md
          fi
          
          if [ -f "assets/data/rag/enhanced-feishu-full-content.json" ]; then
            NODE_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('assets/data/rag/enhanced-feishu-full-content.json')).summary.totalNodes)")
            echo "- 总节点数: $NODE_COUNT" >> sync_report.md
          fi
          
          cat sync_report.md

      - name: 🚀 Deploy to Cloudflare (if changed)
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "🚀 数据更新，触发Cloudflare部署..."
          # 注意: 这里需要配置Cloudflare部署密钥
          # npx wrangler pages deploy . --project-name=chatsvtr
          echo "✅ 部署完成（如果配置了Cloudflare密钥）"