#!/bin/bash

# ChatSVTR Production Deployment Script
# 由 Deploy Manager 代理调用

set -e

# 颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检查环境变量
check_env() {
    log_info "检查部署环境..."
    
    if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
        log_error "CLOUDFLARE_API_TOKEN 未设置"
        exit 1
    fi
    
    if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
        log_error "CLOUDFLARE_ACCOUNT_ID 未设置"
        exit 1
    fi
    
    log_success "环境变量检查完成"
}

# 回滚部署
rollback_deployment() {
    log_info "开始回滚部署..."
    
    # 获取最近的部署ID
    log_info "获取部署历史..."
    LATEST_ID=$(wrangler pages deployment list --project-name=chatsvtr --limit=2 --format=json | jq -r '.[1].id' 2>/dev/null)
    
    if [ -z "$LATEST_ID" ] || [ "$LATEST_ID" = "null" ]; then
        log_error "无法获取上一个部署ID"
        exit 1
    fi
    
    log_info "回滚到部署: $LATEST_ID"
    wrangler pages deployment rollback $LATEST_ID --project-name=chatsvtr
    
    log_success "回滚完成！"
    log_info "生产URL: https://chatsvtr.pages.dev"
}

# 新部署
new_deployment() {
    log_info "开始新部署..."
    
    # 检查Git状态
    if [ -n "$(git status --porcelain)" ]; then
        log_warning "工作目录有未提交的更改"
        read -p "是否继续部署? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "部署已取消"
            exit 0
        fi
    fi
    
    # 运行测试
    log_info "运行代码质量检查..."
    npm run lint:check || {
        log_error "代码风格检查失败"
        exit 1
    }
    
    log_info "运行单元测试..."
    npm run test:unit || {
        log_error "单元测试失败"
        exit 1
    }
    
    # 构建项目
    log_info "构建和优化项目..."
    npm run optimize:all || {
        log_error "构建失败"
        exit 1
    }
    
    # 部署到 Cloudflare Pages
    log_info "部署到 Cloudflare Pages..."
    wrangler pages deploy . --project-name=chatsvtr --branch=main || {
        log_error "部署失败"
        exit 1
    }
    
    log_success "部署完成！"
    log_info "生产URL: https://chatsvtr.pages.dev"
    
    # 创建部署摘要
    create_deployment_summary
}

# 创建部署摘要
create_deployment_summary() {
    local SUMMARY_FILE="deployment-summary.md"
    
    cat > $SUMMARY_FILE << EOF
# 🚀 ChatSVTR 部署摘要

## 部署信息
- **时间**: $(date '+%Y-%m-%d %H:%M:%S')
- **分支**: $(git branch --show-current)
- **提交**: $(git rev-parse --short HEAD)
- **提交信息**: $(git log -1 --pretty=format:'%s')

## 质量检查
- ✅ 代码风格检查通过
- ✅ 单元测试通过 
- ✅ 项目构建成功
- ✅ 资源优化完成

## 部署结果
- 🌐 **生产URL**: https://chatsvtr.pages.dev
- 📊 **项目名**: chatsvtr
- 🔧 **平台**: Cloudflare Pages

## 下步建议
1. 运行 E2E 测试验证部署
2. 检查生产环境功能
3. 监控错误和性能指标

---
🤖 Generated by Deploy Manager Agent
EOF

    log_info "部署摘要已保存到: $SUMMARY_FILE"
    
    # 如果在 GitHub Actions 环境中，追加到 GITHUB_STEP_SUMMARY
    if [ -n "$GITHUB_STEP_SUMMARY" ]; then
        cat $SUMMARY_FILE >> $GITHUB_STEP_SUMMARY
    fi
}

# 主函数
main() {
    log_info "🚀 ChatSVTR Deploy Manager 启动"
    echo "=================================================="
    
    # 检查环境
    check_env
    
    # 根据参数决定操作
    if [ "$1" = "rollback" ]; then
        rollback_deployment
    else
        new_deployment
    fi
    
    echo "=================================================="
    log_success "Deploy Manager 执行完成！"
}

# 脚本入口
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi